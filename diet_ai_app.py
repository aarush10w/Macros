"""
Diet Assisting AI App – Streamlit Implementation
-------------------------------------------------
A minimal, fully‑working prototype that you can run locally.

How to run (once Python ≥3.9 is installed):
1. Create and activate a virtual environment (optional but recommended):
   ```bash
   python -m venv .venv
   source .venv/bin/activate  # Windows: .venv\Scripts\activate
   ```
2. Install the dependencies:
   ```bash
   pip install streamlit openai python-dotenv
   ```
3. Either set your OpenAI key as an environment variable **OPENAI_API_KEY** *or* paste it into the sidebar when the app runs.
4. Launch the app:
   ```bash
   streamlit run diet_ai_app.py
   ```

That’s it – a browser tab will open with the questionnaire and AI meal‑plan generator.
"""

import os

import streamlit as st

try:
    import openai  # type: ignore
except ModuleNotFoundError:
    st.error("OpenAI package not found. Please run `pip install openai` and restart.")
    st.stop()

# ────────────────────────────────────────────────
# Streamlit page configuration
# ────────────────────────────────────────────────
st.set_page_config(
    page_title="Diet Assisting AI",
    page_icon="🍏",
    layout="centered",
)

st.title("🥗 Diet Assisting AI")
st.markdown(
    "Answer a few quick questions and get a personalised calorie target, macro split, and a 1‑day meal plan generated by GPT‑4‑o‑mini."
)

# ────────────────────────────────────────────────
# Helper functions
# ────────────────────────────────────────────────

def calculate_bmr(weight: float, height: float, age: int, gender: str) -> float:
    """Mifflin‑St Jeor equation."""
    if gender.lower() == "male":
        return 10 * weight + 6.25 * height - 5 * age + 5
    return 10 * weight + 6.25 * height - 5 * age - 161


def activity_multiplier(level: str) -> float:
    mult = {
        "Sedentary (little / no exercise)": 1.2,
        "Lightly active (1‑3 days/wk)": 1.375,
        "Moderately active (3‑5 days/wk)": 1.55,
        "Very active (6‑7 days/wk)": 1.725,
        "Extra active (athlete / labour)": 1.9,
    }
    return mult.get(level, 1.2)  # fallback to Sedentary



def goal_adjustment(cals: float, goal: str) -> float:
    if goal == "Lose fat":
        return cals - 500  # ≈0.45 kg loss per week
    if goal == "Gain muscle":
        return cals + 300  # slow lean gain
    return cals  # maintain


def macro_split(weight: float, target_cals: float, goal: str):
    # Protein – higher when cutting
    protein_grams = weight * (2.0 if goal == "Lose fat" else 1.8)
    fat_grams = weight * 1.0  # ≈1 g/kg
    remaining_cals = target_cals - (protein_grams * 4 + fat_grams * 9)
    carb_grams = max(0, remaining_cals) / 4  # never negative
    return round(protein_grams), round(fat_grams), round(carb_grams)


# ────────────────────────────────────────────────
# Sidebar – API key
# ────────────────────────────────────────────────
with st.sidebar:
    st.header("🔑 API Key")
    api_key = st.text_input(
        "Enter your OpenAI API key (it stays in your browser)",
        type="password",
        placeholder="sk‑...",
    )
    if api_key:
        openai.api_key = api_key
    else:
        openai.api_key = os.getenv("OPENAI_API_KEY", "")

# ────────────────────────────────────────────────
# Main questionnaire
# ────────────────────────────────────────────────

st.subheader("1. Goal")
goal = st.selectbox("What’s your primary goal?", ["Lose fat", "Gain muscle", "Maintain weight"])

st.subheader("2. Body stats")
col1, col2 = st.columns(2)
with col1:
    gender = st.selectbox("Gender", ["Male", "Female"])
    age = st.number_input("Age (years)", min_value=13, max_value=100, value=25)
with col2:
    height_cm = st.number_input("Height (cm)", min_value=120, max_value=250, value=170)
    weight_kg = st.number_input("Weight (kg)", min_value=35, max_value=250, value=70)

st.subheader("3. Lifestyle & timeframe")
activity = st.selectbox(
    "Normal weekly activity level", list(activity_multiplier.__annotations__.keys())  # type: ignore
)
timeframe_weeks = st.slider("Target timeframe (weeks)", 1, 52, 12)

st.subheader("4. Food preferences & allergies (optional)")
preferences = st.text_input("e.g. Vegetarian, no nuts, love Indian cuisine …")

# ────────────────────────────────────────────────
# Calculate button
# ────────────────────────────────────────────────

if st.button("🚀 Generate my plan"):
    # Basic sanity checks
    if weight_kg <= 0 or height_cm <= 0:
        st.error("Please enter valid height and weight.")
        st.stop()

    bmr = calculate_bmr(weight_kg, height_cm, age, gender)
    maintenance_cals = bmr * activity_multiplier(activity)
    target_cals = goal_adjustment(maintenance_cals, goal)
    protein_g, fat_g, carb_g = macro_split(weight_kg, target_cals, goal)

    # Display numeric results
    st.success("### Daily Calorie & Macro Targets")
    st.write(
        f"**Calories:** {int(target_cals)} kcal  \
        **Protein:** {protein_g} g  \
        **Fat:** {fat_g} g  \
        **Carbs:** {carb_g} g"
    )

    # AI‑generated meal plan (optional – only if key supplied)
    if not openai.api_key:
        st.info("💡 Enter your OpenAI key in the sidebar above to receive a customised 1‑day meal plan.")
    else:
        with st.spinner("ChatGPT is cooking up your meals …"):
            system_prompt = "You are a certified sports nutritionist creating practical Indian‑friendly meal plans."
            user_prompt = f"""Create a single‑day diet plan that exactly hits:\nCalories: {int(target_cals)} kcal\nProtein: {protein_g} g\nFat: {fat_g} g\nCarbs: {carb_g} g.\nSplit into 4‑6 meals/snacks. Include dish names, ingredients, and approx. macros for each meal. Food preferences/allergies: {preferences or 'none'}. Use foods easily available in Indian supermarkets. Give totals at the end."""
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt},
                    ],
                    temperature=0.6,
                )
                st.markdown("---")
                st.subheader("🥑 Sample 1‑Day Meal Plan")
                st.markdown(response.choices[0].message.content)
            except Exception as exc:
                st.error(f"OpenAI API error: {exc}")
